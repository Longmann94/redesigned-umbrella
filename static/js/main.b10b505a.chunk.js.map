{"version":3,"sources":["App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","App","useAuthState","user","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatMessage","props","message","text","uid","photoURL","messageClass","className","src","alt","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","add","createdAt","FieldValue","serverTimestamp","console","log","current","scrollIntoView","behavior","map","msg","id","ref","onSubmit","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"oNASAA,IAASC,cAAc,CACnBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGnB,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YAkGZC,MAhGf,WAAe,MAEAC,YAAaH,GAArBI,EAFQ,oBAIf,SAASC,IAMP,OACE,wBAAQC,QALe,WACzB,IAAMC,EAAW,IAAIjB,IAASU,KAAKQ,mBACnCR,EAAKS,gBAAgBF,IAGnB,iCAIJ,SAASG,IACP,OAAOV,EAAKW,aACV,wBAAQL,QAAU,kBAAMN,EAAKY,WAA7B,sBAIJ,SAASC,EAAYC,GAAO,IAAD,EACKA,EAAMC,QAA7BC,EADkB,EAClBA,KAAMC,EADY,EACZA,IAAKC,EADO,EACPA,SAEZC,EAAeF,IAAQjB,EAAKW,YAAYM,IAAM,OAAS,WAE7D,OACE,sBAAKG,UAAS,kBAAaD,GAA3B,UACA,qBAAKE,IAAKH,EAAUI,IAAI,KACxB,4BAAIN,OAKR,SAASO,IAEP,IAAMC,EAAQC,mBAERC,EAAczB,EAAU0B,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aALjB,EAOGC,YAAkBF,EAAO,CAACG,QAAS,OAA/CC,EAPS,sBASkBC,mBAAS,IAT3B,mBASTC,EATS,KASEC,EATF,KAWVC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAGlBD,EAAEE,iBAHgB,EAKMvC,EAAKW,YAAtBM,EALW,EAKXA,IAAKC,EALM,EAKNA,SALM,SAOZQ,EAAYc,IAAI,CACpBxB,KAAMkB,EACNO,UAAWnD,IAASW,UAAUyC,WAAWC,kBACzC1B,MACAC,aAXgB,OAclBiB,EAAa,IACbS,QAAQC,IAAI,CAACb,IACbR,EAAMsB,QAAQC,eAAe,CAACC,SAAU,WAhBtB,2CAAH,sDAoBjB,OACE,qCACA,gCACChB,GAAYA,EAASiB,KAAI,SAAAC,GAAG,OAAI,cAACrC,EAAD,CAA0BE,QAASmC,GAAjBA,EAAIC,OACtD,qBAAKC,IAAK5B,EAAV,kBAED,uBAAM6B,SAAUjB,EAAhB,UACA,uBAAOkB,MAAOpB,EAAWqB,SAAU,SAAClB,GAAD,OAAOF,EAAaE,EAAEmB,OAAOF,UAChE,wBAAQG,KAAK,SAAb,qBAEA,cAAC/C,EAAD,OAKH,OACE,sBAAKU,UAAU,MAAf,UACA,2BAIA,kCACMhB,EAAO,cAACmB,EAAD,IAAe,cAAClB,EAAD,UC1GhCqD,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b10b505a.chunk.js","sourcesContent":["import React, {useState, useRef} from \"react\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nimport {useAuthState} from \"react-firebase-hooks/auth\";\nimport {useCollectionData} from \"react-firebase-hooks/firestore\";\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyCXdl3wgGBTHLy8FbR_IiGUsfSimWYTZw4\",\n    authDomain: \"fir-chatroom-99b54.firebaseapp.com\",\n    databaseURL: \"https://fir-chatroom-99b54.firebaseio.com\",\n    projectId: \"fir-chatroom-99b54\",\n    storageBucket: \"fir-chatroom-99b54.appspot.com\",\n    messagingSenderId: \"232210812571\",\n    appId: \"1:232210812571:web:c46ef1967fcfbdfe61403e\",\n    measurementId: \"G-CQ6Z53H2H2\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n//sign in user = object, not sign in would result in this = null\nconst [user] = useAuthState(auth);\n\nfunction SignIn(){\n  //signin with google auth\n  const signInWithGoogle = () => {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  auth.signInWithPopup(provider);\n}\n  return (\n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  );\n}\n\nfunction SignOut(){\n  return auth.currentUser && (\n    <button onClick= {() => auth.signOut()}>Sign Out</button>\n  );\n}\n\nfunction ChatMessage(props){\n  const {text, uid, photoURL} = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n\n  return (\n    <div className={`message ${messageClass}`}>\n    <img src={photoURL} alt=\"\"/>\n    <p>{text}</p>\n    </div>\n  )\n}\n\nfunction ChatRoom(){\n\n  const dummy = useRef();\n\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef.orderBy(\"createdAt\");\n\n   const [messages] = useCollectionData(query, {idField: \"id\"});\n\n   const [formValue, setFormValue] = useState(\"\");\n\n   const sendMessage = async(e) => {\n\n      //prevent form from refreshing\n     e.preventDefault();\n\n     const {uid, photoURL} = auth.currentUser;\n\n     await messagesRef.add({\n       text: formValue,\n       createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n       uid,\n       photoURL\n     });\n\n     setFormValue(\"\");\n     console.log([messages]);\n     dummy.current.scrollIntoView({behavior: \"smooth\"});\n\n   }\n\n   return(\n     <>\n     <div>\n     {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n      <div ref={dummy}> </div>\n     </div>\n     <form onSubmit={sendMessage}>\n     <input value={formValue} onChange={(e) => setFormValue(e.target.value)}/>\n     <button type=\"submit\">send</button>\n     </form>\n     <SignOut />\n     </>\n   )\n}\n\n  return (\n    <div className=\"App\">\n    <header>\n\n    </header>\n\n    <section>\n         {user ? <ChatRoom /> : <SignIn />}\n    </section>\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}